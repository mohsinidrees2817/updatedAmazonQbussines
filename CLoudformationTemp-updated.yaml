AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation for the blog on GenAI with QBusiness"

Parameters:
  LatestAmiId:
    Description: EC2 machine image
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: Please enter VPC CIDR
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: Please enter CIDR for Public Subnet
  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: Please enter CIDR for Private Subnet
  CertificateARN:
    Description: Certificate that needs to be added to the Load Balancer
    Type: String
    Default: "arn:aws:acm:us-west-2:654654371288:certificate/46b6c798-37fb-4ca2-982f-7c14bdaf33d0"
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    AllowedPattern: ^[a-z0-9]+$
    ConstraintDescription: May only include lowercase, alphanumeric characters
  QApplicationId:
    Type: String
    Description: Q Application Id
    Default: "c3b1409d-664b-400c-a52f-1501742dee4e"
  IdcApplicationArn:
    Type: String
    Description: Identity Center customer application ARN.
    Default: ""

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: myVPC

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: "us-west-2a"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: myPublicSubnet

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: "us-west-2b"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: myPrivateSubnet

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: myRouteTable

  myRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet
      RouteTableId: !Ref myRouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0

  QManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowQChat
            Effect: Allow
            Action:
              - "qbusiness:ChatSync"
            Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QApplicationId}"

  QServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
              - sts:SetContext
      Path: /
      ManagedPolicyArns:
        - !Ref QManagedPolicy

  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/EC2InstanceConnect

  EC2ServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE # CreateTokenWithIAM requires wildcard
    Properties:
      Roles:
        - !Ref EC2ServiceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAssumeQRole
            Effect: Allow
            Action:
              - "sts:AssumeRole"
              - "sts:SetContext"
            Resource: !GetAtt QServiceRole.Arn
          - Sid: AllowTokenExchange
            Effect: Allow
            Action:
              - "sso-oauth:CreateTokenWithIAM"
            Resource: "*"

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
          - EC2_SECURITY_GROUP_INGRESS_OPEN_TO_WORLD_RULE # This SG only applies to Internet facing ALB
          - SECURITY_GROUP_INGRESS_CIDR_NON_32_RULE
          - SECURITY_GROUP_MISSING_EGRESS_RULE
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from Internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from Internet

  ELBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic to EC2 Instance
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
          - SECURITY_GROUP_MISSING_EGRESS_RULE
    Properties:
      GroupDescription: EC2 Security group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ELBSecurityGroup
          Description: Allow inbound traffic from ALB

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Metadata:
      guard:
        SuppressedRules:
          - EC2_SECURITY_GROUP_EGRESS_OPEN_TO_WORLD_RULE
          - SECURITY_GROUP_EGRESS_ALL_PROTOCOLS_RULE
    Properties:
      Description: Allow all outbound traffic
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2ServiceRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 180
      VPCZoneIdentifier:
        - !Ref myPublicSubnet
        - !Ref myPrivateSubnet

      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      Tags:
        - Key: Name
          Value: Custom Q UI
          PropagateAtLaunch: true

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref myPublicSubnet
            Groups:
              - !Ref SecurityGroup
        EbsOptimized: true
        ImageId: !Ref "LatestAmiId"
        InstanceType: t3.micro
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
              echo "Trying dnf install"
              dnf -y install python3.11 python3.11-pip git
              if [ $? -eq 0 ]; then
                echo "Yum install succeeded"
                success=true
              else
                echo "Attempt $attempt_num failed. Sleeping for 4 seconds and trying again..."
                sleep 4
                ((attempt_num++))
              fi
            done
            cd /opt
            git clone https://github.com/mohsinidrees2817/updatedAmazonQbussines
            cd updatedAmazonQbussines/
            pip3.11 install virtualenv
            python3.11 -m virtualenv venv
            venv/bin/pip install -r requirements.txt
            nohup venv/bin/streamlit run Chatapplication.py --server.port=8080 > logs.txt &

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Sub "EC2TargetGroup-${AWS::Region}"
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      UnhealthyThresholdCount: 3
      VpcId: !Ref myVPC

  UserPool:
    Type: AWS::Cognito::UserPool
    Metadata:
      guard:
        SuppressedRules:
          - COGNITO_USER_POOL_MFA_CONFIGURATION_RULE # Not required for the demo
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${LowerCaseFqdn.Output}/component/streamlit_oauth.authorize_button/index.html"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub ${AuthName}-dns-testname

  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      guard:
        SuppressedRules:
          - ELBV2_ACM_CERTIFICATE_REQUIRED # Certificate is loaded externally for the demo
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref CertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
          Order: 1

  ALBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      guard:
        SuppressedRules:
          - ELBV2_LISTENER_PROTOCOL_RULE # Not required for the demo
          - ELBV2_LISTENER_SSL_POLICY_RULE # NO SSL Policy for an HTTP listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
      guard:
        SuppressedRules:
          - ELB_DELETION_PROTECTION_ENABLED # Not required for the demo
          - ELBV2_ACCESS_LOGGING_RULE # Not required for the demo
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref myPublicSubnet
        - !Ref myPrivateSubnet
      SecurityGroups:
        - !Ref ELBSecurityGroup

  LowerCaseFqdn:
    Type: Custom::LowerCaseFqdn
    Properties:
      ServiceToken: !GetAtt LowerCaseFunction.Arn
      Input: !GetAtt ApplicationLoadBalancer.DNSName

  LowerCaseFunction:
    Type: AWS::Lambda::Function
    Metadata:
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK # This a synchronous call no need for DLQ
          - LAMBDA_INSIDE_VPC # No need for VPC
          - LAMBDA_CONCURRENCY_CHECK # Not required for the demo
    Properties:
      Handler: index.handler
      Role: !GetAtt LowerCaseRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          def error_handler(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.error(e)
                    cfnresponse.send(args[0], args[1], cfnresponse.FAILED, {})
                    return None
            return wrapper

          @error_handler
          def handler(event, context):
            if event["RequestType"] in ["Create", "Update"]:
              response = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Output": event['ResourceProperties']['Input'].lower()})
            if event["RequestType"] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 60

  LowerCaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  URL:
    Description: URL to access the Streamlit APP
    Value: !Sub https://${ApplicationLoadBalancer.DNSName}
  TrustedIssuerUrl:
    Description: Endpoint of the trusted issuer to setup Identity Center
    Value: !GetAtt UserPool.ProviderURL
  Audience:
    Description: Audience to setup customer application in Identity Center
    Value: !Ref UserPoolClient
  RoleArn:
    Description: "ARN of the IAM role required to setup token exchange in Identity Center"
    Value: !GetAtt EC2ServiceRole.Arn
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolClient
  ApplicationLoadBalancerDNSName:
    Description: "DNS Name of the Application Load Balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
